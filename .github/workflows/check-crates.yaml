on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches: [main, release**, feature**]
  pull_request:
    branches: [main, release**, feature**]
    # Don't run on draft PR's, see: https://github.com/orgs/community/discussions/25722#discussioncomment-3248917
    types: [opened, synchronize, reopened, ready_for_review]

name: check crates

env:
  RUST_FMT: nightly-2023-04-01
  RUST_VERSION: "1.76"
  CARGO_CONCORDIUM_VERSION: "3.0.0"
  # The following environment variables need to be set for build to succeed.
  CCD_ELECTION_NODE: ""
  CCD_ELECTION_CONTRACT_ADDRESS: ""
  CCD_ELECTION_NETWORK: ""

jobs:
  clippy:
    name: clippy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        crates:
          - contracts/concordium-governance-committee-election/Cargo.toml
          - election-server/Cargo.toml
          - coordinator-tool/Cargo.toml
          - test-scripts/Cargo.toml
          - apps/electionguard-bindings/Cargo.toml
          - apps/guardian/src-tauri/Cargo.toml

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: add legacy deb repository # see https://github.com/tauri-apps/tauri/issues/9662
        uses: myci-actions/add-deb-repo@11
        with:
          repo: deb http://archive.ubuntu.com/ubuntu jammy main universe
          repo-name: ubuntu-legacy

      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          # Needed to support tauri
          packages: libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
          version: 1.0

      - name: Run cargo clippy
        run: |
          rustup default ${{ env.RUST_VERSION }}
          rustup component add clippy
          cargo clippy --manifest-path=${{ matrix.crates }} --locked -- -D warnings
  rustfmt:
    name: format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        crates:
          - contracts/concordium-governance-committee-election/Cargo.toml
          - election-server/Cargo.toml
          - apps/electionguard-bindings/Cargo.toml
          - apps/guardian/src-tauri/Cargo.toml
          - coordinator-tool/Cargo.toml
          - test-scripts/Cargo.toml

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Run cargo fmt
        run: |
          rustup default ${{ env.RUST_FMT }}
          rustup component add rustfmt
          cargo fmt --manifest-path=${{ matrix.crates }} -- --check

  test-contracts:
    name: test contracts
    runs-on: ubuntu-latest
    strategy:
      matrix:
        contracts:
          - contracts/concordium-governance-committee-election

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Download and install Cargo Concordium
        run: |
          CARGO_CCD=cargo-concordium_${{ env.CARGO_CONCORDIUM_VERSION }}
          wget https://distribution.concordium.software/tools/linux/$CARGO_CCD
          chmod +x $CARGO_CCD
          sudo mv $CARGO_CCD /usr/bin/cargo-concordium

      - name: Run cargo concordium test
        run: |
          rustup default ${{ env.RUST_VERSION }}
          rustup target install wasm32-unknown-unknown
          cargo concordium test --out "${{ matrix.contracts }}/concordium-out/module.wasm.v1" -- --manifest-path "${{ matrix.contracts }}/Cargo.toml"
